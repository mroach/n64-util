#!/usr/bin/env ruby
# frozen_string_literal: true

# Given a directory or file path argument, show ROM information.
# For a directory, all ROMs with valid extensions are inspected.
# For a file path, shows information about just that one ROM.
# Output can be plain text (human-readable, default) or JSON

require "json"
require "optparse"
require_relative "lib/n64"

def die(message)
  warn(message)
  exit(1)
end

options = { format: :text, fields: [] }

OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} PATH [options]"

  opts.on("-oFORMAT", "--output=FORMAT", "Output format. 'json' or 'text'") do |val|
    options[:format] = val.to_sym
  end

  opts.on("-fFIELDS", "--fields=FIELDS", Array, "List of fields to return. Only applies to JSON.") do |val|
    options[:fields] = val.map(&:to_sym)
  end

  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit(0)
  end
end.parse!

path = ARGV.shift

die("Usage: #{__FILE__} PATH") if path.nil?
die("Path '#{path}' does not exist.") unless File.exist?(path)

if File.file?(path)
  info = N64::RomInfo.new(path)

  if options[:format] == :json
    data = info.to_h.merge(file_name: File.basename(path))
    if (fields = options[:fields]).any?
      data = data.slice(*fields)
    end
    puts JSON.pretty_generate(data)
  else
    puts info.to_s
  end

  exit 0
end

files = Dir[File.join(path, "*.{#{N64::ROM_EXTENSIONS.join(",")}}")].map do |file_path|
  N64::RomInfo.new(file_path).to_h.merge(file_name: File.basename(file_path))
end.sort_by { |x| x[:file_name] }

if options[:format] == :json
  data = files
  if (fields = options[:fields]).any?
    data = data.map { |item| item.slice(*fields) }
  end
  puts JSON.pretty_generate(data)
  exit 0
end

c1w = files.map { |info| info[:file_name].length }.max + 2

header = format("%-#{c1w}s %6s %-20s %s %10s %-4s %-10s %8s",
  "File Name", "Format", "ROM Title", "Ver", "Region", "CIC", "CRC 1", "Size")

puts header
puts "-" * header.length

files.each do |info|
  puts format("%-#{c1w}s %6s %-20s 1.%s %10s %s 0x%s %8s",
    info[:file_name],
    info[:file_format],
    info[:title],
    info[:version],
    info[:region],
    info[:cic],
    info[:crc1],
    N64::Util.format_file_size(info[:file_size], precision: 0))
end
